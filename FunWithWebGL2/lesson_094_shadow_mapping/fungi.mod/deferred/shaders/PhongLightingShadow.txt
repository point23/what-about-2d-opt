<shader>{
	"name"		: "PhongLightingShadow",
	"ubo"		: [ "UBOTransform", "UBOLighting" ],
	"options"	: { "modelMatrix":false },
	"uniforms"	: [
		{ "name":"u_colorTex",			"type":"sample2D" },
		{ "name":"u_normalTex",			"type":"sample2D" },
		{ "name":"u_positionTex",		"type":"sample2D" },
		{ "name":"u_emissionTex",		"type":"sample2D" },
		{ "name":"u_depthTex",			"type":"sample2D" },
		{ "name":"u_shadowTex",			"type":"sample2D" },

		{ "name":"u_ambientStrength",	"type":"float" },
		{ "name":"u_diffuseStrength",	"type":"float" },
		{ "name":"u_specularStrength",	"type":"float" },
		{ "name":"u_specularShininess",	"type":"float" },

		{ "name":"u_lightProjMatrix",	"type":"mat4" }
	]
}<\shader>
	
<materials>[ { 
	"name"		: "PhongLightingShadow", 
	"options"	: { "depthTest":false, "blend":false },
	"uniforms"	: [
		{ "name":"u_ambientStrength",	"value":"0.3" },
		{ "name":"u_diffuseStrength",	"value":"0.5" },
		{ "name":"u_specularStrength",	"value":"0.2" },
		{ "name":"u_specularShininess",	"value":"20.0" }
	]
} ]<\materials>
	
<vertex>
	#version 300 es
	layout(location=0) in vec3 a_position;
	layout(location=2) in vec2 a_uv;

	out highp vec2 v_uv;

	void main(void){
		v_uv = a_uv;
		gl_Position	= vec4(a_position.xyz,1.0);
	}
<\vertex>

<fragment>
	#version 300 es
	precision mediump float;

	uniform UBOTransform{
		mat4 	projViewMatrix;
		vec3	cameraPos;
		float	globalTime; 
		vec2	screenSize;
	};

	in highp vec2 v_uv;

	uniform UBOLighting{
		vec3 lightPosition;
		vec3 lightDirection;
		vec3 lightColor;
	};

	uniform sampler2D u_colorTex;
	uniform sampler2D u_normalTex;
	uniform sampler2D u_positionTex;
	uniform sampler2D u_emissionTex;
	uniform sampler2D u_depthTex;
	uniform sampler2D u_shadowTex;
	uniform float u_ambientStrength;
	uniform float u_diffuseStrength;
	uniform float u_specularStrength;
	uniform float u_specularShininess;

	uniform mat4 u_lightProjMatrix;

	out vec4 oFragColor;

	vec4 phongLighting(vec3 dWorldPos, vec4 dColor, vec3 dNormal, vec3 pxToLight){
		//Ambient Lighting
		vec3 cAmbient		= lightColor * u_ambientStrength;
		
		//Diffuse Lighting
		//vec3 pxToLight		= normalize(lightPosition - dWorldPos);	//light direction based on pixel world position
		float diffuseAngle	= max( dot(dNormal,pxToLight) ,0.0);	//Angle between Light Direction and Pixel Direction (1==90d)
		vec3 cDiffuse		= lightColor * diffuseAngle * u_diffuseStrength;

		//Specular Lighting
		vec3 pxToCamera		= normalize(cameraPos - dWorldPos);	//Camera Direction based on pixel world position
		vec3 reflectVector	= reflect(-pxToLight, dNormal);		//Reflective direction of line from pixel direction as pivot.
		float specular		= pow( max( dot(reflectVector, pxToCamera) ,0.0), u_specularShininess ); //Angle of reflected light and camera eye
		vec3 cSpecular		= lightColor * specular * u_specularStrength;

		//Final Color
		return vec4(dColor.rgb * (cAmbient + cDiffuse + cSpecular), 1.0);
	}

	bool checkInShadow(vec3 dWorldPos, mat4 lightProjViewMatrix, vec3 norm, vec3 lightDir){
		vec4 pxPosLS			= lightProjViewMatrix * vec4(dWorldPos, 1.0);
		vec3 shadowMapUV		= (pxPosLS.xyz / pxPosLS.w) * 0.5 + 0.5; //Map from -1,1 to 0-1 : Z is our current Depth
		float pxDepthLS			= texture(u_shadowTex, shadowMapUV.xy).r;

		//Calc Bias to help get rid of shadow acne
		float theta				= dot(norm, lightDir);
		float bias				= clamp( 0.005 * tan(acos(theta)) , 0.0, 0.01 );

		//Do shadows only within clipping space and if depth is less then whats in Shadow Buffer
		return ( pxDepthLS < 1.0 && step( shadowMapUV.z - bias, pxDepthLS ) == 0.0 );
	}

	bool isLightingPossible(vec3 normal, vec3 emis){
		vec3 n = abs(normal);
		return !( n.x+n.y+n.z <= 0.0 || emis.x+emis.y+emis.z != 0.0); //If no normal, Or is Emission, Dont do lighting
	}

	void main(void){
		//DEBUG SHADOW DEPTH TEXTURE
		//oFragColor = vec4(  vec3(texture(u_shadowTex, v_uv).r), 1.0);
		//return;

		//....................................................
		// Skip any pixel that depth at or beyond the camera.
		ivec2 fCoord	= ivec2(gl_FragCoord.xy);
		float dDepth	= texelFetch(u_depthTex, fCoord, 0).x;
		if(dDepth >= 1.0) discard;
		//if(dDepth >= 1.0){ oFragColor = vec4(1.0, 0.0, 0.0, 1.0); return; }

		//....................................................
		//Check if the pixel had any normal direction, if not don't bother lighting it.
		vec4 dColor		= texelFetch(u_colorTex, fCoord, 0); //texture(u_colorTex, v_uv);
		vec3 dNormal	= texelFetch(u_normalTex, fCoord, 0).xyz;
		vec3 dEmission	= texelFetch(u_emissionTex, fCoord, 0).xyz;

		if(!isLightingPossible(dNormal, dEmission)){ oFragColor = dColor; return; }

		//....................................................
		//Calc Shadows
		vec3 dWorldPos	= texelFetch(u_positionTex, fCoord, 0).xyz;

		if(checkInShadow(dWorldPos, u_lightProjMatrix, dNormal, -lightDirection)){
			oFragColor = vec4(dColor.xyz * lightColor * u_ambientStrength, 1.0);
			return;
		}

		//....................................................
		//Start Calculating Lighting
		
		//vec3 pxToLight = normalize(lightPosition - dWorldPos);
		//oFragColor = phongLighting(dWorldPos, dColor, dNormal, pxToLight);		// Using Point Light

		oFragColor = phongLighting( dWorldPos, dColor, dNormal, -lightDirection ); 	// Using Direction Light
	}
<\fragment>