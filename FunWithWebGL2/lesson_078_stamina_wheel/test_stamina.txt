<shader>
{
	"name" : "TestShader",
	"useModelMatrix" : true,
	"useUBOTransform" : true,
	"uniforms" : [ 
		"u_ringAUsing","float",
		"u_ringBUsing","float",
		"u_ringCUsing","float",
		"u_ringAUsed","float", 
		"u_ringBUsed","float", 
		"u_ringCUsed","float",
		"u_isHeal","float"
	]
}
</shader>
	
<materials>[ 
	{ "name":"MatTestShader", "useBlending":true, "useSampleAlphaCoverage":false, 
		"uniforms":[
		]} 
]</materials>
	
<vertex>
	#version 300 es
	layout(location=0) in vec3 a_position;
	layout(location=2) in vec2 a_uv;

	uniform UBOTransform{
		mat4 matProjection;
		mat4 matCameraView;
		vec3 posCamera;
		float fTime;
		vec2 screenRes;
	};

	uniform mat4 uModalMatrix;

	out vec2 v_uv;
	out float v_time;

	void main(void){
		//..........................
		vec3 postion	= a_position;

		v_uv			= a_uv;
		v_time			= abs( sin(fTime * 0.004) );
		
		//..........................
		//Spherical billboarding : Quad Billboard : Works only on quads that have its center at origin.
		vec3 right 	= vec3( matCameraView[0][0], matCameraView[1][0], matCameraView[2][0] ),
			 up 	= vec3( matCameraView[0][1], matCameraView[1][1], matCameraView[2][1] );
		//up		= vec3(0.0, 1.0, 0.0);					//Cylindrical instead of spherical
		postion	= (right * postion.x) + (up * postion.y);	//Rotate vertex toward camera

		//..........................
		gl_Position = matProjection * matCameraView * uModalMatrix * vec4(postion, 1.0);
	}
</vertex>

<fragment>
	#version 300 es
	precision mediump float;

	in vec2 v_uv;
	in float v_time;

	out vec4 FragColor;
	
	#define PI		3.141592653589793
	#define PI_2	6.283185307179586
	#define PI_H	1.5707963267948966
	#define PI_Q	0.7853981633974483

	const vec4 baseColor		= vec4(0.5725,0.9764,0.4039,1.0);
	const vec4 usedColor		= vec4(0.25,0.25,0.25,1.0);
	const vec4 inUseColor		= vec4(1.0,0.0,0.0,1.0);
	const vec4 inUseFadeColor	= vec4(1.0,0.6509,0.0,1.0);

	uniform float u_ringAUsing;// 	= 0.0;
	uniform float u_ringBUsing;// 	= 0.0;
	uniform float u_ringCUsing;// 	= 0.0;
	uniform float u_ringAUsed;//	= 0.25;
	uniform float u_ringBUsed;//	= 0.0;
	uniform float u_ringCUsed;//	= 0.7;
	uniform float u_isHeal;

	void main(void){
		vec2 uv			= v_uv - 0.5;			// shift origin of quad to center, instead of bottom left corner
		float uvLen		= length(uv);			// Distance from Origin
		float uvAng		= atan(uv.x,uv.y);		// -PI : PI
		float uvNAng	= uvAng / PI_2 + 0.5;	// to -0.5 : 0.5, then to 0 : 1

		vec4 color 		= vec4(0.0,0.0,0.0,0.0);
		vec4 bColor 	= (u_isHeal == 1.0)? inUseColor : baseColor;

		//......................
		//RING A
		if( uvLen >= 0.12 && uvLen <= 0.33 ){
			if(u_ringAUsing != 0.0 && uvNAng <= u_ringAUsing && uvNAng >= u_ringAUsed)
											color = mix(inUseColor,inUseFadeColor,v_time) ;
			else if(uvNAng >= u_ringAUsed)	color = bColor;
			else 							color = usedColor;
		}

		//......................
		//RING B
		if( uvLen >= 0.36 && uvLen <= 0.42 ){
			if(u_ringBUsing != 0.0 && uvNAng <= u_ringBUsing && uvNAng >= u_ringBUsed)
											color = mix(inUseColor,inUseFadeColor,v_time) ;
			else if(uvNAng >= u_ringBUsed)	color = bColor;
			else 							color = usedColor;
		}

		//......................
		//RING C
		if( uvLen >= 0.45 && uvLen <= 0.49 ){
			if(u_ringCUsing != 0.0 && uvNAng <= u_ringCUsing && uvNAng >= u_ringCUsed)
											color = mix(inUseColor,inUseFadeColor,v_time) ;
			else if(uvNAng >= u_ringCUsed)	color = bColor;
			else 							color = usedColor;
		}

		FragColor = color;
	}
</fragment>