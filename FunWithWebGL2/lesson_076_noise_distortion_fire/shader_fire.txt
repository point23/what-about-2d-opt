<shader>
{
	"name" : "FireShader",
	"useModelMatrix" : true,
	"useUBOTransform" : true,
	"uniforms" : ["txNoise","sample2D","txDistort","sample2D"]
}
</shader>
	
<materials>[ 
	{ "name":"MatfFireShader", "useBlending":true, "useSampleAlphaCoverage":false, 
		"uniforms":[
			 "txNoise","tex","texNoise",
			 "txDistort","tex","texDistort"
		]} 
]</materials>
	
<vertex>
	#version 300 es
	layout(location=0) in vec3 a_position;
	layout(location=2) in vec2 a_uv;
	
	const float fOneSec = 0.001;

	uniform UBOTransform{
		mat4 matProjection;
		mat4 matCameraView;
		vec3 posCamera;
		float fTime;
	};

	uniform mat4 uModalMatrix;

	out vec2 v_uv;
	out vec2 v_uv_anim;

	void main(void){
		v_uv = a_uv;

		v_uv_anim = a_uv;
		v_uv_anim.y -= fract(fTime * fOneSec * 0.2);	//fract(fTime / 5000.0);
		v_uv_anim.x -= fract(fTime * fOneSec * 0.05); 	//fract(fTime / 20000.0);

		gl_Position = matProjection * matCameraView * uModalMatrix * vec4(a_position, 1.0);
	}
</vertex>

<fragment>
	#version 300 es
	precision mediump float;

	in vec2 v_uv;
	in vec2 v_uv_anim;

	uniform sampler2D txNoise;
	uniform sampler2D txDistort;

	out vec4 FragColor;

	//http://iquilezles.org/www/articles/palettes/palettes.htm
	vec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d){ return a + b*cos( 6.28318*(c*t+d) ); }
	
	const float ColorAnchor[3]	= float[]( 0.0, 0.5, 0.65 );
	const vec4 ColorRamp[3]		= vec4[]( 
		vec4(0.0,0.0,0.0,0.0),
		vec4(0.933,0.679,0.378,1.0),
		vec4(1.0,0.992,0.703,1.0)
	);


	vec4 getColorRamp(float v, float feather){
		for(int i=0; i < 2; i++){
			if(v >= ColorAnchor[i] && v < ColorAnchor[i+1])
				return mix( ColorRamp[i], ColorRamp[i+1], smoothstep(ColorAnchor[i+1]-feather,ColorAnchor[i+1],v) );
		}
		return ColorRamp[2];
	}

	const float DistortStrength = 0.2;
	void main(void){
		/*...........................
		Get the Noise Texture Animating
		vec4 n = texture(txNoise, v_uv_anim.xy);
		//n.r = smoothstep(0.3,0.7,n.r);
		FragColor = vec4(n.r,n.r,n.r,1.0);
		*/

		/*...........................
		Simple Distortion with Strength, distortion : 0 -> 1 
		vec4 d = texture(txDistort,v_uv) * DistortStrength;
		vec4 n = texture(txNoise, v_uv_anim.xy + d.rg );
		*/
		/*Remap distortion values to -1 to 1 for different effect.
		vec4 d = texture(txDistort,v_uv) * 2.0 + 1.0;	 //Remap
		vec4 n = texture(txNoise, v_uv_anim.xy + d.rg * DistortStrength ); */
		
		//FragColor = vec4(n.r,n.r,n.r,1.0);

		//...........................
		/* Create a Gradient Mask to control how large the fire is */
		float grad = mix(2.0, 0.0, v_uv.y + 0.45);
		//FragColor = vec4(grad,grad,grad,1.0);
		//return;

		vec4 d = texture(txDistort,v_uv);
		vec4 d1 = d * 0.2;					//between 0 : 1
		vec4 d2 = (d * 2.0 - 1.0) * 0.2;	//between -1 : 1

		vec4 n = texture(txNoise, v_uv_anim.xy + d2.rg );
		n += grad;

		//see that the offset in grad creates negative values, not zeros
		//if(n.r < 0.0){ FragColor = vec4(1.0,0.0,0.0,1.0); return; }

		//FragColor = vec4(n.r,n.r,n.r,1.0);
		//FragColor *= mix( vec4(1.0,1.0,0.0,1.0), vec4(1.0,0.0,0.0,1.0), v_uv.y );
		//FragColor *= vec4( palette(v_uv.y, vec3(0.8,0.5,0.4), vec3(0.2, 0.4, 0.2), vec3(2.0, 1.0, 1.0), vec3(0.00, 0.25, 0.25)), 1.0 );
		//FragColor *= vec4( palette(v_uv.y, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3(1.0, 1.0, 1.0), vec3(0.00, 0.33, 0.67)), 1.0 );

		//float nn = step(0.5,n.r);
		//float nn = smoothstep(0.5,0.65,n.r);
		//FragColor = vec4(nn,nn,nn,1.0);

		FragColor = getColorRamp( clamp(n.r, 0.0, 1.0), 0.05 );
		
		return;
	}
</fragment>