<shader>
{
	"name":"Noise",
	"useModelMatrix":true,
	"useUBOTransform":true,
	"uniforms":[]
}
</shader>

<materials>
[
	{ "name":"MatNoise", "uniforms":[] }
]
</materials>
	
<vertex>
	#version 300 es
	layout(location=0) in vec4 a_position;
	layout(location=2) in vec2 a_uv;

	uniform UBOTransform{
		mat4 matProjection;
		mat4 matCameraView;
		vec3 posCamera;
		float fTime;
	};

	uniform mat4 uModalMatrix;

	out vec2 v_uv;

	void main(void){
		v_uv = a_uv;
		gl_Position	= matProjection * matCameraView * uModalMatrix * vec4(a_position.xyz,1.0);
	}
</vertex>

<fragment>
	#version 300 es
	precision mediump float;

	in vec2 v_uv;

	out vec4 outColor;


	float random(in vec2 st){ return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123); }

	float noise(in vec2 st){
	    vec2 i = floor(st);
	    vec2 f = fract(st);

	    // Four corners in 2D of a tile
	    float a = random(i);
	    float b = random(i + vec2(1.0, 0.0));
	    float c = random(i + vec2(0.0, 1.0));
	    float d = random(i + vec2(1.0, 1.0));

	    // Smooth Interpolation

	    // Cubic Hermine Curve.  Same as SmoothStep()
	    vec2 u = f*f*(3.0-2.0*f);
	    // u = smoothstep(0.,1.,f);

	    // Mix 4 coorners porcentages
	    return mix(a, b, u.x) +
	            (c - a)* u.y * (1.0 - u.x) +
	            (d - b) * u.x * u.y;
	}

	const vec2 iResolution = vec2(100,100);

	void main(void){
		outColor = vec4(gl_FragCoord.xy,0.0,1.0);

		//outColor = vec4(0.0,0.0,0.0,1.0);

		//vec2 st = gl_FragCoord.xy / vec2(50.0,50.0);

		// Scale the coordinate system to see some noise in action
		//vec2 pos = vec2(st*5.0);

		// Use the noise function
		//float n = noise(pos);
		//vec2 no = vec2(v_uv.x * 3.0, v_uv.y * 3.0);
		//float n = noise(no);
		//outColor = vec4(vec3(n), 1.0);
		//outColor = vec4(v_uv,0.0,1.0);
	}



</fragment>
https://www.youtube.com/watch?v=hYPuXCYOH48 //CREATE AWESOME GRID IN GLSL

https://www.redblobgames.com/articles/noise/introduction.html
https://www.redblobgames.com/maps/terrain-from-noise/
https://thebookofshaders.com/02/

http://blog.char95.com/perlin-noise-fire/
http://blog.char95.com/demos/perlin-noise-fire/?2
https://www.clicktorelease.com/blog/vertex-displacement-noise-3d-webgl-glsl-three-js/ FUCKING AWESOME


http://www.kamend.com/2012/06/perlin-noise-and-glsl/
http://www.iquilezles.org/www/articles/warp/warp.htm AWESOME

https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83

https://www.shadertoy.com/view/4dS3Wd
#define NOISE fbm
#define NUM_NOISE_OCTAVES 5


float hash(float n) { return fract(sin(n) * 1e4); }
float hash(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }

float noise(float x) {
    float i = floor(x);
    float f = fract(x);
    float u = f * f * (3.0 - 2.0 * f);
    return mix(hash(i), hash(i + 1.0), u);
}


float noise(vec2 x) {
    vec2 i = floor(x);
    vec2 f = fract(x);

	// Four corners in 2D of a tile
	float a = hash(i);
    float b = hash(i + vec2(1.0, 0.0));
    float c = hash(i + vec2(0.0, 1.0));
    float d = hash(i + vec2(1.0, 1.0));

    // Simple 2D lerp using smoothstep envelope between the values.
	// return vec3(mix(mix(a, b, smoothstep(0.0, 1.0, f.x)),
	//			mix(c, d, smoothstep(0.0, 1.0, f.x)),
	//			smoothstep(0.0, 1.0, f.y)));

	// Same code, with the clamps in smoothstep and common subexpressions
	// optimized away.
    vec2 u = f * f * (3.0 - 2.0 * f);
	return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}


float noise(vec3 x) {
    const vec3 step = vec3(110, 241, 171);

    vec3 i = floor(x);
    vec3 f = fract(x);
 
    // For performance, compute the base input to a 1D hash from the integer part of the argument and the 
    // incremental change to the 1D based on the 3D -> 1D wrapping
    float n = dot(i, step);

    vec3 u = f * f * (3.0 - 2.0 * f);
    return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),
                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),
               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),
                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);
}


float fbm(float x) {
	float v = 0.0;
	float a = 0.5;
	float shift = float(100);
	for (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {
		v += a * noise(x);
		x = x * 2.0 + shift;
		a *= 0.5;
	}
	return v;
}


float fbm(vec2 x) {
	float v = 0.0;
	float a = 0.5;
	vec2 shift = vec2(100);
	// Rotate to reduce axial bias
    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));
	for (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {
		v += a * noise(x);
		x = rot * x * 2.0 + shift;
		a *= 0.5;
	}
	return v;
}


float fbm(vec3 x) {
	float v = 0.0;
	float a = 0.5;
	vec3 shift = vec3(100);
	for (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {
		v += a * noise(x);
		x = x * 2.0 + shift;
		a *= 0.5;
	}
	return v;
}