<shader>
{
	"name" : "TransFeedback_P2",
	"useModalMat4" : true,
	"useUBOTransform" : true
}
</shader>,
	"uniforms" : ["u_time","float"]

<materials>[ { "name":"MatTransFeedback_P2","useBlending":false,"useSampleAlphaCoverage":true } ]</materials>
	
<vertex>
	#version 300 es
	layout(location=0) in vec3 a_position;
	layout(location=1) in vec2 a_uv;
	layout(location=2) in vec3 a_offset;
	layout(location=3) in float a_ageNorm;
	
	uniform UBOTransform{
		mat4 matProjection;
		mat4 matCameraView;
		vec3 posCamera;
	};

	uniform mat4 uModalMatrix;

	out vec2 v_uv;
	out float v_age;

	void main(void){
		v_uv = a_uv;
		v_age = a_ageNorm;

		vec3 pos = a_position;// * (1.0-v_age);

		gl_Position = matProjection * matCameraView * uModalMatrix * vec4(a_offset + pos, 1.0);
	}
</vertex>

<fragment>
	#version 300 es
	precision mediump float;

	in vec2 v_uv;
	in float v_age;

	out vec4 outColor;

	void main(void){
		//outColor = vec4(0.0,0.0,0.0,1.0);

		/* */
		vec2 delta 		= v_uv - vec2(0.5,0.5);//Distance from center
		float lenSqr 	= abs(dot(delta,delta));		//Length Squared (avoiding square roots)
		float a 		= smoothstep(0.25,0.23,lenSqr);	//Center, so 0.5*0.5 = 0.25, the squared len from center, avoid roots.

		a -= v_age;
		//if(a < 0.1) discard;
		outColor		= vec4(0.0,0.0,0.0,a);
		//outColor		= vec4(a,0.0,0.0,a);
	}
</fragment>