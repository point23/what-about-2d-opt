<shader>{
	"name":"LowPolyColor",
	"ubo":[ "UBOTransform" ],
	"options": { "modelMatrix":true },
	"uniforms":[
		{ "name":"u_color", "type":"vec4" }
	]
}<\shader>
	
<materials>[
	{ "name":"LowPolyRed",		"uniforms":[{ "name":"u_color", "type":"rgba", "value":"ff0000ff" }] },
	{ "name":"LowPolyGreen",	"uniforms":[{ "name":"u_color", "type":"rgba", "value":"00ff00ff" }] },
	{ "name":"LowPolyGray",		"uniforms":[{ "name":"u_color", "type":"rgba", "value":"a0a0a0ff" }] }
]<\materials>
	
<vertex>
	#version 300 es
	layout(location=0) in vec3 a_position;

	uniform UBOTransform{
		mat4 	projViewMatrix;
		vec3	cameraPos;
		float	globalTime;
		vec2	screenSize;
	};

	uniform mat4 u_modelMatrix;

	out vec3 v_worldPos;

	void main(void){
		vec4 worldPos = u_modelMatrix * vec4(a_position,1.0);

		v_worldPos	= worldPos.xyz;
		gl_Position	= projViewMatrix * worldPos;
	}
<\vertex>

<fragment>
	#version 300 es
	precision mediump float;

	layout(location=0) out vec4 outColor;
	layout(location=1) out vec4 outPosition;
	layout(location=2) out vec4 outNormal;
	layout(location=3) out vec4 outEmission;

	in vec3 v_worldPos;

	uniform vec4 u_color;

	void main(void){
		//......................................
		//Deferred Output
		outColor 		= u_color;
		outPosition.rgb	= v_worldPos;
		outNormal.rgb	= normalize( cross( dFdx(v_worldPos), dFdy(v_worldPos) ) );
		//outEmission		= u_color;
	}
<\fragment>